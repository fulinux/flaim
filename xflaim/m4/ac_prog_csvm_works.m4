dnl @synopsis AC_PROG_CSVM_WORKS
dnl @category CSharp
dnl @author John Calcote <john.calcote@gmail.com>
dnl @version 2008-06-17
dnl @license GPLWithACException

AC_DEFUN([AC_PROG_CSVM_WORKS], [
AC_CHECK_PROG(uudecode, uudecode$EXEEXT, yes)
if test x$uudecode = xyes; then
AC_CACHE_CHECK([if uudecode can decode base 64 file], ac_cv_prog_uudecode_base64, [
dnl /** Test class to see if CSharp VM works. */
dnl class Test { static void Main() {} }
cat << \EOF > Test.uue
begin-base64 755 Test.exe
TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFt
IGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZGUuDQ0KJAAAAAAAAABQRQAATAED
AIUNWEgAAAAAAAAAAOAADgELAQYAAAQAAAAEAAAAAAAAACAAAAAgAAAAQAAA
AABAAAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAAAAA
ABAAABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAABggAABPAAAAAEAAAMwC
AAAAAAAAAAAAAAAAAAAAAAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQIAAACAAAAAAAAAAAAAAA
ZCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAeAIAAAAgAAAABAAAAAIAAAAAAAAA
AAAAAAAAACAAAGAucnNyYwAAAMwCAAAAQAAAAAQAAAAGAAAAAAAAAAAAAAAA
AABAAABALnJlbG9jAAAMAAAAAGAAAAACAAAACgAAAAAAAAAAAAAAAAAAQAAA
QgAAAAAAAAAAAAAAAAAAAAD/JRAgQAAAAAAAAAAAAAAAQCAAAAAAAABaIAAA
AAAAAAAAAABOIAAAECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABfQ29yRXhl
TWFpbgBtc2NvcmVlLmRsbABAIAAAAAAAAAAASAAAAAIAAAD4IAAAgAEAAAEA
AAACAAAG+CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKAEAAAoqBioAAEJTSkIB
AAEAAAAAAAwAAAB2MS4xLjQzMjIAAAAAAAUAcAAAAKwAAAAjfgAAHAEAADwA
AAAjU3RyaW5ncwAAAABYAQAABAAAACNVUwBcAQAAFAAAACNCbG9iAAAAcAEA
ABAAAAAjR1VJRAAAAAAAAAAAAAAAAQAAAUcEAAAJAAAAAAAAAAAAAAABAAAA
AQAAAAIAAAACAAAAAQAAAAEAAAABAAAAAAAsAAEAAAAAAAYACgARAAAAAAAj
AAAAAAABAAEAAAAQAB4AAAAFAAEAAQDsIAAAAACGGBgAAQABAPQgAAAAAJEA
NQAOAAEACQAYAAEABIAAAAAAAAAAAAAAAAAAAAAAHgAAAAEAAACIEwAAAAAA
AAUAAQAAAAAAAG1zY29ybGliAE9iamVjdABTeXN0ZW0ALmN0b3IAVGVzdAA8
TW9kdWxlPgBUZXN0LmV4ZQBNYWluAAAAAAAAAAADIAABCLd6XFYZNOCJAwAA
AQAAA/ywUUx/c0y9yzj+P4QQNQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAAB
AAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWEAAAHQCAAAAAAAA
AAAAAHQCNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9
BO/+AAABAAAAAAAAAAAAAAAAAAAAAAA/AAAAAAAAAAQAAAACAAAAAAAAAAAA
AAAAAAAARAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABU
AHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAH8AsATUAQAAAQBTAHQAcgBpAG4A
ZwBGAGkAbABlAEkAbgBmAG8AAACwAQAAAQAwADAANwBmADAANABiADAAAAAo
AAIAAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAgAAAAJAACAAEA
QwBvAG0AcABhAG4AeQBOAGEAbQBlAAAAAAAgAAAAJAACAAEAUAByAG8AZAB1
AGMAdABOAGEAbQBlAAAAAAAgAAAAKAACAAEATABlAGcAYQBsAEMAbwBwAHkA
cgBpAGcAaAB0AAAAIAAAACwABQABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBl
AAAAVABlAHMAdAAAAAAALAACAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQA
aQBvAG4AAAAAACAAAAAcAAIAAQBDAG8AbQBtAGUAbgB0AHMAAAAgAAAAJAAC
AAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAgAAAAPAAJAAEATwByAGkA
ZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFQAZQBzAHQALgBlAHgAZQAA
AAAALAACAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAACAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAM
AAAAAjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAA
====
EOF
if uudecode$EXEEXT Test.uue; then
  ac_cv_prog_uudecode_base64=yes
else
  echo "configure: __oline__: uudecode had trouble decoding base 64 file 'Test.uue'" >&AC_FD_CC
  echo "configure: failed file was:" >&AC_FD_CC
  cat Test.uue >&AC_FD_CC
  ac_cv_prog_uudecode_base64=no
fi
rm -f Test.uue])
fi
if test x$ac_cv_prog_uudecode_base64 != xyes; then
  rm -f Test.class
  AC_MSG_WARN([I have to compile Test.cs from scratch])
  if test x$ac_cv_prog_csc_works = xno; then
    AC_MSG_ERROR([Cannot compile CSharp source. $CSC does not work properly])
  fi
  if test x$ac_cv_prog_csc_works = x; then
    AC_PROG_TRY_CSC
  fi
fi
AC_CACHE_CHECK([if $CSVM works], [ac_cv_prog_csvm_works], [
CS_TEST=Test.cs
TEST_EXE=Test.exe
changequote(, )dnl
cat << \EOF > $CS_TEST
/* [#]line __oline__ "configure" */
class Test { static void Main() { } }
EOF
changequote([, ])dnl
if test x$ac_cv_prog_uudecode_base64 != xyes; then
  if AC_TRY_COMMAND([$CSC $CSCFLAGS $CS_TEST]) && test -s $TEST_EXE; then
    :
  else
    echo "configure: failed program was:" >&AC_FD_CC
    cat $CS_TEST >&AC_FD_CC
    AC_MSG_ERROR([The CSharp compiler $CSC failed (see config.log)])
  fi
fi
if AC_TRY_COMMAND([$CSVM $CSVMFLAGS $TEST_EXE]) >/dev/null 2>&1; then
  ac_cv_prog_csvm_works=yes
else
  echo "configure: failed program was:" >&AC_FD_CC
  cat $CS_TEST >&AC_FD_CC
  AC_MSG_ERROR([The CSharp VM $CSVM failed (see config.log)])
fi
rm -fr $CS_TEST $TEST_EXE Test.uue
])
AC_PROVIDE([$0])dnl
])
